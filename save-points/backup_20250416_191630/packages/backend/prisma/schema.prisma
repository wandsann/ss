generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   // patient, doctor, nurse, pharmacist, cleaner, cook, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  cpf       String   @unique
  birthDate DateTime
  gender    String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  crm       String   @unique
  specialty String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nurse {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  coren     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pharmacist {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  crf       String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cleaner {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cook {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id        Int      @id @default(autoincrement())
  patientId Int
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  date      DateTime
  status    String   // scheduled, in_progress, completed, cancelled
  type      String   // consultation, exam, procedure
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecord {
  id            Int         @id @default(autoincrement())
  patientId     Int
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  appointmentId Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  diagnosis     String
  prescription  String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Medication {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  description String
  status    String   // pending, in_progress, completed
  priority  String   // low, medium, high
  dueDate   DateTime
  assignedTo Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 